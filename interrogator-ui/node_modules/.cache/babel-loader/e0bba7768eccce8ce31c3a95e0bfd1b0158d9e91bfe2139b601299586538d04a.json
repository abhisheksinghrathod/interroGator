{"ast":null,"code":"var _jsxFileName = \"/Users/bhumika/myprojects/interrogator/interrogator-ui/src/components/InterviewPage.js\",\n  _s = $RefreshSig$();\n// src/components/InterviewPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../api/client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InterviewPage() {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const [session, setSession] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentAnswer, setCurrentAnswer] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [feedback, setFeedback] = useState(null);\n  const [flags, setFlags] = useState([]);\n  const [finishing, setFinishing] = useState(false);\n  const [finishError, setFinishError] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n  const recorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  // Load session info and initialize timer\n  const loadSession = async () => {\n    const res = await api.get(`sessions/${sessionId}/`);\n    setSession(res.data);\n    const startMs = new Date(res.data.started_at).getTime();\n    const remainingSec = Math.max(0, Math.floor((startMs + 30 * 60 * 1000 - Date.now()) / 1000));\n    setTimer(remainingSec);\n  };\n\n  // Load current questions\n  const loadQuestions = async () => {\n    var _res$data$results;\n    const res = await api.get(`session-questions/?session=${sessionId}&ordering=asked_at`);\n    const list = Array.isArray(res.data) ? res.data : (_res$data$results = res.data.results) !== null && _res$data$results !== void 0 ? _res$data$results : [];\n    setQuestions(list);\n  };\n\n  // 1) On mount, fetch session and start countdown\n  useEffect(() => {\n    loadSession();\n  }, [sessionId]);\n\n  // 2) Poll questions every 2 seconds\n  useEffect(() => {\n    loadQuestions();\n    const iq = setInterval(loadQuestions, 2000);\n    return () => clearInterval(iq);\n  }, [sessionId]);\n\n  // 3) Countdown timer\n  useEffect(() => {\n    if (timer <= 0) return;\n    const tid = setInterval(() => {\n      setTimer(t => {\n        if (t <= 1) {\n          clearInterval(tid);\n          handleFinish();\n          return 0;\n        }\n        return t - 1;\n      });\n    }, 1000);\n    return () => clearInterval(tid);\n  }, [timer]);\n\n  // 4) Start video recording\n  useEffect(() => {\n    async function startRec() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n      const recorder = new MediaRecorder(stream, {\n        mimeType: 'video/webm'\n      });\n      const chunks = [];\n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = () => {\n        setRecordedBlob(new Blob(chunks, {\n          type: 'video/webm'\n        }));\n        stream.getTracks().forEach(t => t.stop());\n      };\n      recorder.start();\n      recorderRef.current = recorder;\n    }\n    startRec();\n    return () => {\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  // Submit an answer and reload questions\n  const submitAnswer = async sq => {\n    if (!currentAnswer.trim()) return;\n    setSubmitting(true);\n    try {\n      await api.patch(`session-questions/${sq.id}/`, {\n        answer_text: currentAnswer\n      });\n      setCurrentAnswer('');\n      await loadQuestions();\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Finish interview with confirmation if unanswered\n  const handleFinish = async () => {\n    const lastQ = questions[questions.length - 1] || {};\n    const unanswered = lastQ.question && !lastQ.answer_text;\n    if (unanswered) {\n      const ok = window.confirm('You have an unanswered question. Are you sure you want to finish the interview?');\n      if (!ok) return;\n    }\n    if (finishing) return;\n    setFinishing(true);\n    setFinishError('');\n    try {\n      await api.patch(`sessions/${sessionId}/`, {\n        status: 'completed'\n      });\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      setFinishError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || JSON.stringify((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n    } finally {\n      setFinishing(false);\n    }\n  };\n\n  // Upload recorded video and poll for feedback\n  useEffect(() => {\n    if (!recordedBlob) return;\n    (async _flagsRes$data$result => {\n      setFeedback(null);\n      const form = new FormData();\n      form.append('session', sessionId);\n      form.append('video_url', recordedBlob, 'interview.webm');\n      await api.post('videos/', form);\n\n      // Poll until feedback appears\n      while (true) {\n        var _fbRes$data$results;\n        const fbRes = await api.get(`feedback/?session=${sessionId}`);\n        const list = Array.isArray(fbRes.data) ? fbRes.data : (_fbRes$data$results = fbRes.data.results) !== null && _fbRes$data$results !== void 0 ? _fbRes$data$results : [];\n        if (list.length) {\n          setFeedback(list[0]);\n          break;\n        }\n        await new Promise(r => setTimeout(r, 2000));\n      }\n      const flagsRes = await api.get(`flags/?recording__session=${sessionId}`);\n      setFlags((_flagsRes$data$result = flagsRes.data.results) !== null && _flagsRes$data$result !== void 0 ? _flagsRes$data$result : flagsRes.data);\n    })();\n  }, [recordedBlob, sessionId]);\n\n  // Render loading state\n  if (!session) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 24\n  }, this);\n\n  // Render completed feedback\n  if (feedback) {\n    var _feedback$detailed_br, _feedback$detailed_br2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Interview Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Overall Score:\", ' ', (_feedback$detailed_br = (_feedback$detailed_br2 = feedback.detailed_breakdown) === null || _feedback$detailed_br2 === void 0 ? void 0 : _feedback$detailed_br2.total_score) !== null && _feedback$detailed_br !== void 0 ? _feedback$detailed_br : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Detailed Breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(feedback.detailed_breakdown, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), flags.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Cheating Flags\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: flags.map(f => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"[\", f.timestamp, \"] \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: f.flag_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 35\n            }, this), \": \", f.description]\n          }, f.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Live Q&A view\n  const lastQ = questions[questions.length - 1] || {};\n  const unanswered = lastQ.question && !lastQ.answer_text;\n  const mins = String(Math.floor(timer / 60)).padStart(2, '0');\n  const secs = String(timer % 60).padStart(2, '0');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      padding: '2rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        marginRight: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Interview Session #\", sessionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Time Remaining: \", mins, \":\", secs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), questions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '1rem',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Q:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), ' ', q.question ? q.question.text : /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Loading\\u2026\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), q.answer_text && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Your Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this), \" \", q.answer_text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this), q.score != null && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Score:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 21\n            }, this), \" \", q.score, \" (confidence\", ' ', Math.round(q.confidence * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '1rem'\n        },\n        children: unanswered ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: 4,\n            style: {\n              width: '100%'\n            },\n            value: currentAnswer,\n            onChange: e => setCurrentAnswer(e.target.value),\n            disabled: submitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => submitAnswer(lastQ),\n            disabled: submitting,\n            style: {\n              marginTop: '0.5rem'\n            },\n            children: submitting ? 'Submitting…' : 'Submit Answer'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for the next question\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), finishError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), \" \", finishError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinish,\n        disabled: finishing || submitting,\n        children: finishing ? 'Finishing…' : submitting ? 'Submitting…' : 'Finish Interview Now'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewPage, \"pkzAFbRaUljVMF8EFqVCeULjb7s=\", false, function () {\n  return [useParams];\n});\n_c = InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","api","jsxDEV","_jsxDEV","Fragment","_Fragment","InterviewPage","_s","sessionId","session","setSession","questions","setQuestions","currentAnswer","setCurrentAnswer","timer","setTimer","feedback","setFeedback","flags","setFlags","finishing","setFinishing","finishError","setFinishError","submitting","setSubmitting","recorderRef","streamRef","recordedBlob","setRecordedBlob","loadSession","res","get","data","startMs","Date","started_at","getTime","remainingSec","Math","max","floor","now","loadQuestions","_res$data$results","list","Array","isArray","results","iq","setInterval","clearInterval","tid","t","handleFinish","startRec","stream","navigator","mediaDevices","getUserMedia","video","audio","current","recorder","MediaRecorder","mimeType","chunks","ondataavailable","e","push","onstop","Blob","type","getTracks","forEach","stop","start","state","submitAnswer","sq","trim","patch","id","answer_text","lastQ","length","unanswered","question","ok","window","confirm","status","err","_err$response","_err$response$data","_err$response2","response","detail","JSON","stringify","message","_flagsRes$data$result","form","FormData","append","post","_fbRes$data$results","fbRes","Promise","r","setTimeout","flagsRes","children","fileName","_jsxFileName","lineNumber","columnNumber","_feedback$detailed_br","_feedback$detailed_br2","style","padding","detailed_breakdown","total_score","summary","map","f","timestamp","flag_type","description","mins","String","padStart","secs","display","flex","marginRight","q","border","marginBottom","text","score","round","confidence","rows","width","value","onChange","target","disabled","onClick","marginTop","color","_c","$RefreshReg$"],"sources":["/Users/bhumika/myprojects/interrogator/interrogator-ui/src/components/InterviewPage.js"],"sourcesContent":["// src/components/InterviewPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../api/client';\n\nexport default function InterviewPage() {\n  const { sessionId } = useParams();\n\n  const [session, setSession] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentAnswer, setCurrentAnswer] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [feedback, setFeedback] = useState(null);\n  const [flags, setFlags] = useState([]);\n  const [finishing, setFinishing] = useState(false);\n  const [finishError, setFinishError] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const recorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  // Load session info and initialize timer\n  const loadSession = async () => {\n    const res = await api.get(`sessions/${sessionId}/`);\n    setSession(res.data);\n    const startMs = new Date(res.data.started_at).getTime();\n    const remainingSec = Math.max(\n      0,\n      Math.floor((startMs + 30 * 60 * 1000 - Date.now()) / 1000)\n    );\n    setTimer(remainingSec);\n  };\n\n  // Load current questions\n  const loadQuestions = async () => {\n    const res = await api.get(\n      `session-questions/?session=${sessionId}&ordering=asked_at`\n    );\n    const list = Array.isArray(res.data) ? res.data : res.data.results ?? [];\n    setQuestions(list);\n  };\n\n  // 1) On mount, fetch session and start countdown\n  useEffect(() => {\n    loadSession();\n  }, [sessionId]);\n\n  // 2) Poll questions every 2 seconds\n  useEffect(() => {\n    loadQuestions();\n    const iq = setInterval(loadQuestions, 2000);\n    return () => clearInterval(iq);\n  }, [sessionId]);\n\n  // 3) Countdown timer\n  useEffect(() => {\n    if (timer <= 0) return;\n    const tid = setInterval(() => {\n      setTimer((t) => {\n        if (t <= 1) {\n          clearInterval(tid);\n          handleFinish();\n          return 0;\n        }\n        return t - 1;\n      });\n    }, 1000);\n    return () => clearInterval(tid);\n  }, [timer]);\n\n  // 4) Start video recording\n  useEffect(() => {\n    async function startRec() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true,\n      });\n      streamRef.current = stream;\n      const recorder = new MediaRecorder(stream, { mimeType: 'video/webm' });\n      const chunks = [];\n      recorder.ondataavailable = (e) => chunks.push(e.data);\n      recorder.onstop = () => {\n        setRecordedBlob(new Blob(chunks, { type: 'video/webm' }));\n        stream.getTracks().forEach((t) => t.stop());\n      };\n      recorder.start();\n      recorderRef.current = recorder;\n    }\n    startRec();\n    return () => {\n      if (\n        recorderRef.current &&\n        recorderRef.current.state !== 'inactive'\n      ) {\n        recorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  // Submit an answer and reload questions\n  const submitAnswer = async (sq) => {\n    if (!currentAnswer.trim()) return;\n    setSubmitting(true);\n    try {\n      await api.patch(`session-questions/${sq.id}/`, {\n        answer_text: currentAnswer,\n      });\n      setCurrentAnswer('');\n      await loadQuestions();\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Finish interview with confirmation if unanswered\n  const handleFinish = async () => {\n    const lastQ = questions[questions.length - 1] || {};\n    const unanswered = lastQ.question && !lastQ.answer_text;\n    if (unanswered) {\n      const ok = window.confirm(\n        'You have an unanswered question. Are you sure you want to finish the interview?'\n      );\n      if (!ok) return;\n    }\n\n    if (finishing) return;\n    setFinishing(true);\n    setFinishError('');\n    try {\n      await api.patch(`sessions/${sessionId}/`, { status: 'completed' });\n      if (\n        recorderRef.current &&\n        recorderRef.current.state !== 'inactive'\n      ) {\n        recorderRef.current.stop();\n      }\n    } catch (err) {\n      setFinishError(\n        err.response?.data?.detail ||\n          JSON.stringify(err.response?.data) ||\n          err.message\n      );\n    } finally {\n      setFinishing(false);\n    }\n  };\n\n  // Upload recorded video and poll for feedback\n  useEffect(() => {\n    if (!recordedBlob) return;\n    (async () => {\n      setFeedback(null);\n      const form = new FormData();\n      form.append('session', sessionId);\n      form.append('video_url', recordedBlob, 'interview.webm');\n      await api.post('videos/', form);\n\n      // Poll until feedback appears\n      while (true) {\n        const fbRes = await api.get(`feedback/?session=${sessionId}`);\n        const list = Array.isArray(fbRes.data)\n          ? fbRes.data\n          : fbRes.data.results ?? [];\n        if (list.length) {\n          setFeedback(list[0]);\n          break;\n        }\n        await new Promise((r) => setTimeout(r, 2000));\n      }\n\n      const flagsRes = await api.get(\n        `flags/?recording__session=${sessionId}`\n      );\n      setFlags(flagsRes.data.results ?? flagsRes.data);\n    })();\n  }, [recordedBlob, sessionId]);\n\n  // Render loading state\n  if (!session) return <div>Loading…</div>;\n\n  // Render completed feedback\n  if (feedback) {\n    return (\n      <div style={{ padding: '2rem' }}>\n        <h2>Interview Completed</h2>\n        <h3>\n          Overall Score:{' '}\n          {feedback.detailed_breakdown?.total_score ?? 'N/A'}\n        </h3>\n        <p>{feedback.summary}</p>\n        <h4>Detailed Breakdown</h4>\n        <pre>\n          {JSON.stringify(feedback.detailed_breakdown, null, 2)}\n        </pre>\n        {flags.length > 0 && (\n          <>\n            <h4>Cheating Flags</h4>\n            <ul>\n              {flags.map((f) => (\n                <li key={f.id}>\n                  [{f.timestamp}] <strong>{f.flag_type}</strong>: {f.description}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  // Live Q&A view\n  const lastQ = questions[questions.length - 1] || {};\n  const unanswered = lastQ.question && !lastQ.answer_text;\n  const mins = String(Math.floor(timer / 60)).padStart(2, '0');\n  const secs = String(timer % 60).padStart(2, '0');\n\n  return (\n    <div style={{ display: 'flex', padding: '2rem' }}>\n      <div style={{ flex: 1, marginRight: '2rem' }}>\n        <h2>Interview Session #{sessionId}</h2>\n        <h3>\n          Time Remaining: {mins}:{secs}\n        </h3>\n\n        {questions.map((q) => (\n          <div\n            key={q.id}\n            style={{\n              border: '1px solid #ccc',\n              padding: '1rem',\n              marginBottom: '1rem',\n            }}\n          >\n            <p>\n              <strong>Q:</strong>{' '}\n              {q.question ? q.question.text : <em>Loading…</em>}\n            </p>\n            {q.answer_text && (\n              <>\n                <p>\n                  <strong>Your Answer:</strong> {q.answer_text}\n                </p>\n                {q.score != null && (\n                  <p>\n                    <strong>Score:</strong> {q.score} (confidence{' '}\n                    {Math.round(q.confidence * 100)}%)\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n        ))}\n\n        <div style={{ marginBottom: '1rem' }}>\n          {unanswered ? (\n            <>\n              <textarea\n                rows={4}\n                style={{ width: '100%' }}\n                value={currentAnswer}\n                onChange={(e) => setCurrentAnswer(e.target.value)}\n                disabled={submitting}\n              />\n              <button\n                onClick={() => submitAnswer(lastQ)}\n                disabled={submitting}\n                style={{ marginTop: '0.5rem' }}\n              >\n                {submitting ? 'Submitting…' : 'Submit Answer'}\n              </button>\n            </>\n          ) : (\n            <p>Waiting for the next question…</p>\n          )}\n        </div>\n\n        {finishError && (\n          <div style={{ color: 'red', marginBottom: '1rem' }}>\n            <strong>Error:</strong> {finishError}\n          </div>\n        )}\n\n        <button\n          onClick={handleFinish}\n          disabled={finishing || submitting}\n        >\n          {finishing\n            ? 'Finishing…'\n            : submitting\n            ? 'Submitting…'\n            : 'Finish Interview Now'}\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,GAAG,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhC,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAU,CAAC,GAAGR,SAAS,CAAC,CAAC;EAEjC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAM8B,WAAW,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM6B,SAAS,GAAG7B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAAC8B,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMkC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,GAAG,GAAG,MAAM/B,GAAG,CAACgC,GAAG,CAAC,YAAYzB,SAAS,GAAG,CAAC;IACnDE,UAAU,CAACsB,GAAG,CAACE,IAAI,CAAC;IACpB,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACJ,GAAG,CAACE,IAAI,CAACG,UAAU,CAAC,CAACC,OAAO,CAAC,CAAC;IACvD,MAAMC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAC3B,CAAC,EACDD,IAAI,CAACE,KAAK,CAAC,CAACP,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAGC,IAAI,CAACO,GAAG,CAAC,CAAC,IAAI,IAAI,CAC3D,CAAC;IACD3B,QAAQ,CAACuB,YAAY,CAAC;EACxB,CAAC;;EAED;EACA,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,iBAAA;IAChC,MAAMb,GAAG,GAAG,MAAM/B,GAAG,CAACgC,GAAG,CACvB,8BAA8BzB,SAAS,oBACzC,CAAC;IACD,MAAMsC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAChB,GAAG,CAACE,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,IAAAW,iBAAA,GAAGb,GAAG,CAACE,IAAI,CAACe,OAAO,cAAAJ,iBAAA,cAAAA,iBAAA,GAAI,EAAE;IACxEjC,YAAY,CAACkC,IAAI,CAAC;EACpB,CAAC;;EAED;EACAhD,SAAS,CAAC,MAAM;IACdiC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACvB,SAAS,CAAC,CAAC;;EAEf;EACAV,SAAS,CAAC,MAAM;IACd8C,aAAa,CAAC,CAAC;IACf,MAAMM,EAAE,GAAGC,WAAW,CAACP,aAAa,EAAE,IAAI,CAAC;IAC3C,OAAO,MAAMQ,aAAa,CAACF,EAAE,CAAC;EAChC,CAAC,EAAE,CAAC1C,SAAS,CAAC,CAAC;;EAEf;EACAV,SAAS,CAAC,MAAM;IACd,IAAIiB,KAAK,IAAI,CAAC,EAAE;IAChB,MAAMsC,GAAG,GAAGF,WAAW,CAAC,MAAM;MAC5BnC,QAAQ,CAAEsC,CAAC,IAAK;QACd,IAAIA,CAAC,IAAI,CAAC,EAAE;UACVF,aAAa,CAACC,GAAG,CAAC;UAClBE,YAAY,CAAC,CAAC;UACd,OAAO,CAAC;QACV;QACA,OAAOD,CAAC,GAAG,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAMF,aAAa,CAACC,GAAG,CAAC;EACjC,CAAC,EAAE,CAACtC,KAAK,CAAC,CAAC;;EAEX;EACAjB,SAAS,CAAC,MAAM;IACd,eAAe0D,QAAQA,CAAA,EAAG;MACxB,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACvDC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFlC,SAAS,CAACmC,OAAO,GAAGN,MAAM;MAC1B,MAAMO,QAAQ,GAAG,IAAIC,aAAa,CAACR,MAAM,EAAE;QAAES,QAAQ,EAAE;MAAa,CAAC,CAAC;MACtE,MAAMC,MAAM,GAAG,EAAE;MACjBH,QAAQ,CAACI,eAAe,GAAIC,CAAC,IAAKF,MAAM,CAACG,IAAI,CAACD,CAAC,CAACnC,IAAI,CAAC;MACrD8B,QAAQ,CAACO,MAAM,GAAG,MAAM;QACtBzC,eAAe,CAAC,IAAI0C,IAAI,CAACL,MAAM,EAAE;UAAEM,IAAI,EAAE;QAAa,CAAC,CAAC,CAAC;QACzDhB,MAAM,CAACiB,SAAS,CAAC,CAAC,CAACC,OAAO,CAAErB,CAAC,IAAKA,CAAC,CAACsB,IAAI,CAAC,CAAC,CAAC;MAC7C,CAAC;MACDZ,QAAQ,CAACa,KAAK,CAAC,CAAC;MAChBlD,WAAW,CAACoC,OAAO,GAAGC,QAAQ;IAChC;IACAR,QAAQ,CAAC,CAAC;IACV,OAAO,MAAM;MACX,IACE7B,WAAW,CAACoC,OAAO,IACnBpC,WAAW,CAACoC,OAAO,CAACe,KAAK,KAAK,UAAU,EACxC;QACAnD,WAAW,CAACoC,OAAO,CAACa,IAAI,CAAC,CAAC;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,YAAY,GAAG,MAAOC,EAAE,IAAK;IACjC,IAAI,CAACnE,aAAa,CAACoE,IAAI,CAAC,CAAC,EAAE;IAC3BvD,aAAa,CAAC,IAAI,CAAC;IACnB,IAAI;MACF,MAAMzB,GAAG,CAACiF,KAAK,CAAC,qBAAqBF,EAAE,CAACG,EAAE,GAAG,EAAE;QAC7CC,WAAW,EAAEvE;MACf,CAAC,CAAC;MACFC,gBAAgB,CAAC,EAAE,CAAC;MACpB,MAAM8B,aAAa,CAAC,CAAC;IACvB,CAAC,SAAS;MACRlB,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAM6B,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAM8B,KAAK,GAAG1E,SAAS,CAACA,SAAS,CAAC2E,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IACnD,MAAMC,UAAU,GAAGF,KAAK,CAACG,QAAQ,IAAI,CAACH,KAAK,CAACD,WAAW;IACvD,IAAIG,UAAU,EAAE;MACd,MAAME,EAAE,GAAGC,MAAM,CAACC,OAAO,CACvB,iFACF,CAAC;MACD,IAAI,CAACF,EAAE,EAAE;IACX;IAEA,IAAIpE,SAAS,EAAE;IACfC,YAAY,CAAC,IAAI,CAAC;IAClBE,cAAc,CAAC,EAAE,CAAC;IAClB,IAAI;MACF,MAAMvB,GAAG,CAACiF,KAAK,CAAC,YAAY1E,SAAS,GAAG,EAAE;QAAEoF,MAAM,EAAE;MAAY,CAAC,CAAC;MAClE,IACEjE,WAAW,CAACoC,OAAO,IACnBpC,WAAW,CAACoC,OAAO,CAACe,KAAK,KAAK,UAAU,EACxC;QACAnD,WAAW,CAACoC,OAAO,CAACa,IAAI,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOiB,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,cAAA;MACZxE,cAAc,CACZ,EAAAsE,aAAA,GAAAD,GAAG,CAACI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAc5D,IAAI,cAAA6D,kBAAA,uBAAlBA,kBAAA,CAAoBG,MAAM,KACxBC,IAAI,CAACC,SAAS,EAAAJ,cAAA,GAACH,GAAG,CAACI,QAAQ,cAAAD,cAAA,uBAAZA,cAAA,CAAc9D,IAAI,CAAC,IAClC2D,GAAG,CAACQ,OACR,CAAC;IACH,CAAC,SAAS;MACR/E,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACAxB,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+B,YAAY,EAAE;IACnB,CAAC,MAAAyE,qBAAA,IAAY;MACXpF,WAAW,CAAC,IAAI,CAAC;MACjB,MAAMqF,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC3BD,IAAI,CAACE,MAAM,CAAC,SAAS,EAAEjG,SAAS,CAAC;MACjC+F,IAAI,CAACE,MAAM,CAAC,WAAW,EAAE5E,YAAY,EAAE,gBAAgB,CAAC;MACxD,MAAM5B,GAAG,CAACyG,IAAI,CAAC,SAAS,EAAEH,IAAI,CAAC;;MAE/B;MACA,OAAO,IAAI,EAAE;QAAA,IAAAI,mBAAA;QACX,MAAMC,KAAK,GAAG,MAAM3G,GAAG,CAACgC,GAAG,CAAC,qBAAqBzB,SAAS,EAAE,CAAC;QAC7D,MAAMsC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC4D,KAAK,CAAC1E,IAAI,CAAC,GAClC0E,KAAK,CAAC1E,IAAI,IAAAyE,mBAAA,GACVC,KAAK,CAAC1E,IAAI,CAACe,OAAO,cAAA0D,mBAAA,cAAAA,mBAAA,GAAI,EAAE;QAC5B,IAAI7D,IAAI,CAACwC,MAAM,EAAE;UACfpE,WAAW,CAAC4B,IAAI,CAAC,CAAC,CAAC,CAAC;UACpB;QACF;QACA,MAAM,IAAI+D,OAAO,CAAEC,CAAC,IAAKC,UAAU,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC;MAC/C;MAEA,MAAME,QAAQ,GAAG,MAAM/G,GAAG,CAACgC,GAAG,CAC5B,6BAA6BzB,SAAS,EACxC,CAAC;MACDY,QAAQ,EAAAkF,qBAAA,GAACU,QAAQ,CAAC9E,IAAI,CAACe,OAAO,cAAAqD,qBAAA,cAAAA,qBAAA,GAAIU,QAAQ,CAAC9E,IAAI,CAAC;IAClD,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,CAACL,YAAY,EAAErB,SAAS,CAAC,CAAC;;EAE7B;EACA,IAAI,CAACC,OAAO,EAAE,oBAAON,OAAA;IAAA8G,QAAA,EAAK;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAExC;EACA,IAAIpG,QAAQ,EAAE;IAAA,IAAAqG,qBAAA,EAAAC,sBAAA;IACZ,oBACEpH,OAAA;MAAKqH,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAR,QAAA,gBAC9B9G,OAAA;QAAA8G,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BlH,OAAA;QAAA8G,QAAA,GAAI,gBACY,EAAC,GAAG,GAAAK,qBAAA,IAAAC,sBAAA,GACjBtG,QAAQ,CAACyG,kBAAkB,cAAAH,sBAAA,uBAA3BA,sBAAA,CAA6BI,WAAW,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,KAAK;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACLlH,OAAA;QAAA8G,QAAA,EAAIhG,QAAQ,CAAC2G;MAAO;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBlH,OAAA;QAAA8G,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BlH,OAAA;QAAA8G,QAAA,EACGd,IAAI,CAACC,SAAS,CAACnF,QAAQ,CAACyG,kBAAkB,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,EACLlG,KAAK,CAACmE,MAAM,GAAG,CAAC,iBACfnF,OAAA,CAAAE,SAAA;QAAA4G,QAAA,gBACE9G,OAAA;UAAA8G,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBlH,OAAA;UAAA8G,QAAA,EACG9F,KAAK,CAAC0G,GAAG,CAAEC,CAAC,iBACX3H,OAAA;YAAA8G,QAAA,GAAe,GACZ,EAACa,CAAC,CAACC,SAAS,EAAC,IAAE,eAAA5H,OAAA;cAAA8G,QAAA,EAASa,CAAC,CAACE;YAAS;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAS,CAAC,MAAE,EAACS,CAAC,CAACG,WAAW;UAAA,GADvDH,CAAC,CAAC3C,EAAE;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAET,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA,eACL,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;;EAEA;EACA,MAAMhC,KAAK,GAAG1E,SAAS,CAACA,SAAS,CAAC2E,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;EACnD,MAAMC,UAAU,GAAGF,KAAK,CAACG,QAAQ,IAAI,CAACH,KAAK,CAACD,WAAW;EACvD,MAAM8C,IAAI,GAAGC,MAAM,CAAC3F,IAAI,CAACE,KAAK,CAAC3B,KAAK,GAAG,EAAE,CAAC,CAAC,CAACqH,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC5D,MAAMC,IAAI,GAAGF,MAAM,CAACpH,KAAK,GAAG,EAAE,CAAC,CAACqH,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEhD,oBACEjI,OAAA;IAAKqH,KAAK,EAAE;MAAEc,OAAO,EAAE,MAAM;MAAEb,OAAO,EAAE;IAAO,CAAE;IAAAR,QAAA,eAC/C9G,OAAA;MAAKqH,KAAK,EAAE;QAAEe,IAAI,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAO,CAAE;MAAAvB,QAAA,gBAC3C9G,OAAA;QAAA8G,QAAA,GAAI,qBAAmB,EAACzG,SAAS;MAAA;QAAA0G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvClH,OAAA;QAAA8G,QAAA,GAAI,kBACc,EAACiB,IAAI,EAAC,GAAC,EAACG,IAAI;MAAA;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,EAEJ1G,SAAS,CAACkH,GAAG,CAAEY,CAAC,iBACftI,OAAA;QAEEqH,KAAK,EAAE;UACLkB,MAAM,EAAE,gBAAgB;UACxBjB,OAAO,EAAE,MAAM;UACfkB,YAAY,EAAE;QAChB,CAAE;QAAA1B,QAAA,gBAEF9G,OAAA;UAAA8G,QAAA,gBACE9G,OAAA;YAAA8G,QAAA,EAAQ;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,EACtBoB,CAAC,CAACjD,QAAQ,GAAGiD,CAAC,CAACjD,QAAQ,CAACoD,IAAI,gBAAGzI,OAAA;YAAA8G,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,EACHoB,CAAC,CAACrD,WAAW,iBACZjF,OAAA,CAAAE,SAAA;UAAA4G,QAAA,gBACE9G,OAAA;YAAA8G,QAAA,gBACE9G,OAAA;cAAA8G,QAAA,EAAQ;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACoB,CAAC,CAACrD,WAAW;UAAA;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3C,CAAC,EACHoB,CAAC,CAACI,KAAK,IAAI,IAAI,iBACd1I,OAAA;YAAA8G,QAAA,gBACE9G,OAAA;cAAA8G,QAAA,EAAQ;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACoB,CAAC,CAACI,KAAK,EAAC,cAAY,EAAC,GAAG,EAChDrG,IAAI,CAACsG,KAAK,CAACL,CAAC,CAACM,UAAU,GAAG,GAAG,CAAC,EAAC,IAClC;UAAA;YAAA7B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CACJ;QAAA,eACD,CACH;MAAA,GAvBIoB,CAAC,CAACtD,EAAE;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAwBN,CACN,CAAC,eAEFlH,OAAA;QAAKqH,KAAK,EAAE;UAAEmB,YAAY,EAAE;QAAO,CAAE;QAAA1B,QAAA,EAClC1B,UAAU,gBACTpF,OAAA,CAAAE,SAAA;UAAA4G,QAAA,gBACE9G,OAAA;YACE6I,IAAI,EAAE,CAAE;YACRxB,KAAK,EAAE;cAAEyB,KAAK,EAAE;YAAO,CAAE;YACzBC,KAAK,EAAErI,aAAc;YACrBsI,QAAQ,EAAG9E,CAAC,IAAKvD,gBAAgB,CAACuD,CAAC,CAAC+E,MAAM,CAACF,KAAK,CAAE;YAClDG,QAAQ,EAAE5H;UAAW;YAAAyF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC,eACFlH,OAAA;YACEmJ,OAAO,EAAEA,CAAA,KAAMvE,YAAY,CAACM,KAAK,CAAE;YACnCgE,QAAQ,EAAE5H,UAAW;YACrB+F,KAAK,EAAE;cAAE+B,SAAS,EAAE;YAAS,CAAE;YAAAtC,QAAA,EAE9BxF,UAAU,GAAG,aAAa,GAAG;UAAe;YAAAyF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC;QAAA,eACT,CAAC,gBAEHlH,OAAA;UAAA8G,QAAA,EAAG;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MACrC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EAEL9F,WAAW,iBACVpB,OAAA;QAAKqH,KAAK,EAAE;UAAEgC,KAAK,EAAE,KAAK;UAAEb,YAAY,EAAE;QAAO,CAAE;QAAA1B,QAAA,gBACjD9G,OAAA;UAAA8G,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC9F,WAAW;MAAA;QAAA2F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CACN,eAEDlH,OAAA;QACEmJ,OAAO,EAAE/F,YAAa;QACtB8F,QAAQ,EAAEhI,SAAS,IAAII,UAAW;QAAAwF,QAAA,EAEjC5F,SAAS,GACN,YAAY,GACZI,UAAU,GACV,aAAa,GACb;MAAsB;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9G,EAAA,CAnSuBD,aAAa;EAAA,QACbN,SAAS;AAAA;AAAAyJ,EAAA,GADTnJ,aAAa;AAAA,IAAAmJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
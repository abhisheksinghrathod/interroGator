{"ast":null,"code":"var _jsxFileName = \"/Users/bhumika/myprojects/interrogator/interrogator-ui/src/components/InterviewPage.js\",\n  _s = $RefreshSig$();\n// src/components/InterviewPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../api/client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InterviewPage() {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const [session, setSession] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentAnswer, setCurrentAnswer] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [feedback, setFeedback] = useState(null);\n  const [flags, setFlags] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [finishing, setFinishing] = useState(false);\n  const [finishError, setFinishError] = useState('');\n\n  // intermission state\n  const [intermission, setIntermission] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [loadingNext, setLoadingNext] = useState(false);\n  const recorderRef = useRef(null);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  // load session & timer\n  const loadSession = async () => {\n    const {\n      data\n    } = await api.get(`sessions/${sessionId}/`);\n    setSession(data);\n    const startMs = new Date(data.started_at).getTime();\n    setTimer(Math.max(0, Math.floor((startMs + 30 * 60 * 1000 - Date.now()) / 1000)));\n  };\n\n  // load questions\n  const loadQuestions = async () => {\n    var _res$data$results;\n    const res = await api.get(`session-questions/?session=${sessionId}&ordering=asked_at`);\n    setQuestions(Array.isArray(res.data) ? res.data : (_res$data$results = res.data.results) !== null && _res$data$results !== void 0 ? _res$data$results : []);\n  };\n\n  // 1) mount: session, polling, timer\n  useEffect(() => {\n    loadSession();\n  }, [sessionId]);\n  useEffect(() => {\n    loadQuestions();\n    const iq = setInterval(loadQuestions, 2000);\n    return () => clearInterval(iq);\n  }, [sessionId]);\n  useEffect(() => {\n    if (timer <= 0) return;\n    const tid = setInterval(() => {\n      setTimer(t => {\n        if (t <= 1) {\n          clearInterval(tid);\n          handleFinish();\n          return 0;\n        }\n        return t - 1;\n      });\n    }, 1000);\n    return () => clearInterval(tid);\n  }, [timer]);\n\n  // 2) start recording\n  useEffect(() => {\n    async function startRec() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      const recorder = new MediaRecorder(stream, {\n        mimeType: 'video/webm'\n      });\n      const chunks = [];\n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = () => {\n        setRecordedBlob(new Blob(chunks, {\n          type: 'video/webm'\n        }));\n        stream.getTracks().forEach(t => t.stop());\n      };\n      recorder.start();\n      recorderRef.current = recorder;\n    }\n    startRec();\n    return () => {\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  // 3) submit answer → evaluate → intermission\n  const submitAnswer = async sq => {\n    if (!currentAnswer.trim()) return;\n    setSubmitting(true);\n    try {\n      await api.patch(`session-questions/${sq.id}/`, {\n        answer_text: currentAnswer\n      });\n      setCurrentAnswer('');\n      await loadQuestions(); // pick up score\n      // begin intermission\n      setIntermission(true);\n      setCountdown(5);\n      const cid = setInterval(() => {\n        setCountdown(c => {\n          if (c <= 1) {\n            clearInterval(cid);\n            setIntermission(false);\n            fetchNextQuestion();\n            return 0;\n          }\n          return c - 1;\n        });\n      }, 1000);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // 4) explicit next question\n  const fetchNextQuestion = async () => {\n    setLoadingNext(true);\n    try {\n      await api.post(`sessions/${sessionId}/next_question/`);\n      await loadQuestions();\n    } catch (err) {\n      console.error('Next question failed', err);\n    } finally {\n      setLoadingNext(false);\n    }\n  };\n\n  // 5) finish interview\n  const handleFinish = async () => {\n    const lastQ = questions[questions.length - 1] || {};\n    const waitingForScore = lastQ.answer_text && lastQ.score == null;\n    if (waitingForScore) return;\n    if (finishing) return;\n    setFinishing(true);\n    setFinishError('');\n    try {\n      await api.patch(`sessions/${sessionId}/`, {\n        status: 'completed'\n      });\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      setFinishError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || JSON.stringify((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n    } finally {\n      setFinishing(false);\n    }\n  };\n\n  // 6) upload + feedback polling\n  useEffect(() => {\n    if (!recordedBlob) return;\n    (async _flagsRes$data$result => {\n      setFeedback(null);\n      const form = new FormData();\n      form.append('session', sessionId);\n      form.append('video_url', recordedBlob, 'interview.webm');\n      await api.post('videos/', form);\n      while (true) {\n        var _fbRes$data$results;\n        const fbRes = await api.get(`feedback/?session=${sessionId}`);\n        const arr = Array.isArray(fbRes.data) ? fbRes.data : (_fbRes$data$results = fbRes.data.results) !== null && _fbRes$data$results !== void 0 ? _fbRes$data$results : [];\n        if (arr.length) {\n          setFeedback(arr[0]);\n          break;\n        }\n        await new Promise(r => setTimeout(r, 2000));\n      }\n      const flagsRes = await api.get(`flags/?recording__session=${sessionId}`);\n      setFlags((_flagsRes$data$result = flagsRes.data.results) !== null && _flagsRes$data$result !== void 0 ? _flagsRes$data$result : flagsRes.data);\n    })();\n  }, [recordedBlob, sessionId]);\n\n  // --- RENDER ---\n  if (!session) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 24\n  }, this);\n  if (feedback) {\n    var _feedback$detailed_br, _feedback$detailed_br2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Interview Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Overall Score: \", (_feedback$detailed_br = (_feedback$detailed_br2 = feedback.detailed_breakdown) === null || _feedback$detailed_br2 === void 0 ? void 0 : _feedback$detailed_br2.total_score) !== null && _feedback$detailed_br !== void 0 ? _feedback$detailed_br : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Detailed Breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(feedback.detailed_breakdown, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), flags.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Cheating Flags\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: flags.map(f => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"[\", f.timestamp, \"] \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: f.flag_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 35\n            }, this), \": \", f.description]\n          }, f.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n\n  // live view\n  const mins = String(Math.floor(timer / 60)).padStart(2, '0');\n  const secs = String(timer % 60).padStart(2, '0');\n  const lastQ = questions[questions.length - 1] || {};\n  const waitingForScore = lastQ.answer_text && lastQ.score == null;\n\n  // **only show “old” questions during intermission**\n  const displayQuestions = intermission ? questions.slice(0, questions.length - 1) : questions;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      padding: '2rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        marginRight: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Interview Session #\", sessionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Time Remaining: \", mins, \":\", secs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), displayQuestions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '1rem',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Q:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 16\n          }, this), \" \", q.question ? q.question.text : /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Loading\\u2026\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), q.answer_text && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Your Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 20\n            }, this), \" \", q.answer_text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this), q.score != null && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Score:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 22\n            }, this), \" \", q.score, \" (confidence \", Math.round(q.confidence * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '1rem'\n        },\n        children: [waitingForScore && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'orange'\n          },\n          children: \"Waiting for evaluation\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 31\n        }, this), !waitingForScore && lastQ.question && !lastQ.answer_text && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: 4,\n            style: {\n              width: '100%'\n            },\n            value: currentAnswer,\n            onChange: e => setCurrentAnswer(e.target.value),\n            disabled: submitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => submitAnswer(lastQ),\n            disabled: submitting,\n            style: {\n              marginTop: '0.5rem'\n            },\n            children: submitting ? 'Submitting…' : 'Submit Answer'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), !waitingForScore && lastQ.answer_text && !intermission && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setIntermission(true);\n            setCountdown(5);\n            const cid = setInterval(() => {\n              setCountdown(c => {\n                if (c <= 1) {\n                  clearInterval(cid);\n                  setIntermission(false);\n                  fetchNextQuestion();\n                  return 0;\n                }\n                return c - 1;\n              });\n            }, 1000);\n          },\n          disabled: loadingNext,\n          style: {\n            marginTop: '0.5rem'\n          },\n          children: loadingNext ? 'Loading Next…' : 'Next Question'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), intermission && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Next question in \", countdown, \"s\\u2026\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), finishError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 77\n        }, this), \" \", finishError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinish,\n        disabled: finishing || waitingForScore,\n        children: finishing ? 'Finishing…' : 'Finish Interview Now'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewPage, \"BYkJryXP2PO6x4AQ20w0EgSfr/0=\", false, function () {\n  return [useParams];\n});\n_c = InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","api","jsxDEV","_jsxDEV","Fragment","_Fragment","InterviewPage","_s","sessionId","session","setSession","questions","setQuestions","currentAnswer","setCurrentAnswer","timer","setTimer","feedback","setFeedback","flags","setFlags","submitting","setSubmitting","finishing","setFinishing","finishError","setFinishError","intermission","setIntermission","countdown","setCountdown","loadingNext","setLoadingNext","recorderRef","recordedBlob","setRecordedBlob","loadSession","data","get","startMs","Date","started_at","getTime","Math","max","floor","now","loadQuestions","_res$data$results","res","Array","isArray","results","iq","setInterval","clearInterval","tid","t","handleFinish","startRec","stream","navigator","mediaDevices","getUserMedia","video","audio","recorder","MediaRecorder","mimeType","chunks","ondataavailable","e","push","onstop","Blob","type","getTracks","forEach","stop","start","current","state","submitAnswer","sq","trim","patch","id","answer_text","cid","c","fetchNextQuestion","post","err","console","error","lastQ","length","waitingForScore","score","status","_err$response","_err$response$data","_err$response2","response","detail","JSON","stringify","message","_flagsRes$data$result","form","FormData","append","_fbRes$data$results","fbRes","arr","Promise","r","setTimeout","flagsRes","children","fileName","_jsxFileName","lineNumber","columnNumber","_feedback$detailed_br","_feedback$detailed_br2","style","padding","detailed_breakdown","total_score","summary","map","f","timestamp","flag_type","description","mins","String","padStart","secs","displayQuestions","slice","display","flex","marginRight","q","border","marginBottom","question","text","round","confidence","color","rows","width","value","onChange","target","disabled","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/bhumika/myprojects/interrogator/interrogator-ui/src/components/InterviewPage.js"],"sourcesContent":["// src/components/InterviewPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../api/client';\n\nexport default function InterviewPage() {\n  const { sessionId } = useParams();\n\n  const [session, setSession] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentAnswer, setCurrentAnswer] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [feedback, setFeedback] = useState(null);\n  const [flags, setFlags] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [finishing, setFinishing] = useState(false);\n  const [finishError, setFinishError] = useState('');\n\n  // intermission state\n  const [intermission, setIntermission] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const recorderRef = useRef(null);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  // load session & timer\n  const loadSession = async () => {\n    const { data } = await api.get(`sessions/${sessionId}/`);\n    setSession(data);\n    const startMs = new Date(data.started_at).getTime();\n    setTimer(Math.max(0, Math.floor((startMs + 30 * 60 * 1000 - Date.now()) / 1000)));\n  };\n\n  // load questions\n  const loadQuestions = async () => {\n    const res = await api.get(`session-questions/?session=${sessionId}&ordering=asked_at`);\n    setQuestions(Array.isArray(res.data) ? res.data : res.data.results ?? []);\n  };\n\n  // 1) mount: session, polling, timer\n  useEffect(() => { loadSession(); }, [sessionId]);\n  useEffect(() => {\n    loadQuestions();\n    const iq = setInterval(loadQuestions, 2000);\n    return () => clearInterval(iq);\n  }, [sessionId]);\n  useEffect(() => {\n    if (timer <= 0) return;\n    const tid = setInterval(() => {\n      setTimer(t => {\n        if (t <= 1) { clearInterval(tid); handleFinish(); return 0; }\n        return t - 1;\n      });\n    }, 1000);\n    return () => clearInterval(tid);\n  }, [timer]);\n\n  // 2) start recording\n  useEffect(() => {\n    async function startRec() {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n      const recorder = new MediaRecorder(stream, { mimeType: 'video/webm' });\n      const chunks = [];\n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = () => {\n        setRecordedBlob(new Blob(chunks, { type: 'video/webm' }));\n        stream.getTracks().forEach(t => t.stop());\n      };\n      recorder.start();\n      recorderRef.current = recorder;\n    }\n    startRec();\n    return () => {\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  // 3) submit answer → evaluate → intermission\n  const submitAnswer = async sq => {\n    if (!currentAnswer.trim()) return;\n    setSubmitting(true);\n    try {\n      await api.patch(`session-questions/${sq.id}/`, { answer_text: currentAnswer });\n      setCurrentAnswer('');\n      await loadQuestions(); // pick up score\n      // begin intermission\n      setIntermission(true);\n      setCountdown(5);\n      const cid = setInterval(() => {\n        setCountdown(c => {\n          if (c <= 1) {\n            clearInterval(cid);\n            setIntermission(false);\n            fetchNextQuestion();\n            return 0;\n          }\n          return c - 1;\n        });\n      }, 1000);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // 4) explicit next question\n  const fetchNextQuestion = async () => {\n    setLoadingNext(true);\n    try {\n      await api.post(`sessions/${sessionId}/next_question/`);\n      await loadQuestions();\n    } catch (err) {\n      console.error('Next question failed', err);\n    } finally {\n      setLoadingNext(false);\n    }\n  };\n\n  // 5) finish interview\n  const handleFinish = async () => {\n    const lastQ = questions[questions.length - 1] || {};\n    const waitingForScore = lastQ.answer_text && lastQ.score == null;\n    if (waitingForScore) return;\n\n    if (finishing) return;\n    setFinishing(true);\n    setFinishError('');\n    try {\n      await api.patch(`sessions/${sessionId}/`, { status: 'completed' });\n      if (recorderRef.current && recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n      }\n    } catch (err) {\n      setFinishError(\n        err.response?.data?.detail ||\n        JSON.stringify(err.response?.data) ||\n        err.message\n      );\n    } finally {\n      setFinishing(false);\n    }\n  };\n\n  // 6) upload + feedback polling\n  useEffect(() => {\n    if (!recordedBlob) return;\n    (async () => {\n      setFeedback(null);\n      const form = new FormData();\n      form.append('session', sessionId);\n      form.append('video_url', recordedBlob, 'interview.webm');\n      await api.post('videos/', form);\n\n      while (true) {\n        const fbRes = await api.get(`feedback/?session=${sessionId}`);\n        const arr = Array.isArray(fbRes.data) ? fbRes.data : fbRes.data.results ?? [];\n        if (arr.length) { setFeedback(arr[0]); break; }\n        await new Promise(r => setTimeout(r, 2000));\n      }\n      const flagsRes = await api.get(`flags/?recording__session=${sessionId}`);\n      setFlags(flagsRes.data.results ?? flagsRes.data);\n    })();\n  }, [recordedBlob, sessionId]);\n\n  // --- RENDER ---\n  if (!session) return <div>Loading…</div>;\n  if (feedback) {\n    return (\n      <div style={{ padding: '2rem' }}>\n        <h2>Interview Completed</h2>\n        <h3>Overall Score: {feedback.detailed_breakdown?.total_score ?? 'N/A'}</h3>\n        <p>{feedback.summary}</p>\n        <h4>Detailed Breakdown</h4>\n        <pre>{JSON.stringify(feedback.detailed_breakdown, null, 2)}</pre>\n        {flags.length > 0 && (\n          <>\n            <h4>Cheating Flags</h4>\n            <ul>\n              {flags.map(f => (\n                <li key={f.id}>\n                  [{f.timestamp}] <strong>{f.flag_type}</strong>: {f.description}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  // live view\n  const mins = String(Math.floor(timer / 60)).padStart(2, '0');\n  const secs = String(timer % 60).padStart(2, '0');\n  const lastQ = questions[questions.length - 1] || {};\n  const waitingForScore = lastQ.answer_text && lastQ.score == null;\n\n  // **only show “old” questions during intermission**\n  const displayQuestions = intermission\n    ? questions.slice(0, questions.length - 1)\n    : questions;\n\n  return (\n    <div style={{ display: 'flex', padding: '2rem' }}>\n      <div style={{ flex: 1, marginRight: '2rem' }}>\n        <h2>Interview Session #{sessionId}</h2>\n        <h3>Time Remaining: {mins}:{secs}</h3>\n\n        {displayQuestions.map(q => (\n          <div key={q.id} style={{ border: '1px solid #ccc', padding: '1rem', marginBottom: '1rem' }}>\n            <p><strong>Q:</strong> {q.question ? q.question.text : <em>Loading…</em>}</p>\n            {q.answer_text && (\n              <>\n                <p><strong>Your Answer:</strong> {q.answer_text}</p>\n                {q.score != null && (\n                  <p><strong>Score:</strong> {q.score} (confidence {Math.round(q.confidence * 100)}%)</p>\n                )}\n              </>\n            )}\n          </div>\n        ))}\n\n        <div style={{ marginBottom: '1rem' }}>\n          {waitingForScore && <p style={{ color: 'orange' }}>Waiting for evaluation…</p>}\n\n          {!waitingForScore && lastQ.question && !lastQ.answer_text && (\n            <>\n              <textarea\n                rows={4}\n                style={{ width: '100%' }}\n                value={currentAnswer}\n                onChange={e => setCurrentAnswer(e.target.value)}\n                disabled={submitting}\n              />\n              <button\n                onClick={() => submitAnswer(lastQ)}\n                disabled={submitting}\n                style={{ marginTop: '0.5rem' }}\n              >\n                {submitting ? 'Submitting…' : 'Submit Answer'}\n              </button>\n            </>\n          )}\n\n          {!waitingForScore && lastQ.answer_text && !intermission && (\n            <button\n              onClick={() => {\n                setIntermission(true);\n                setCountdown(5);\n                const cid = setInterval(() => {\n                  setCountdown(c => {\n                    if (c <= 1) {\n                      clearInterval(cid);\n                      setIntermission(false);\n                      fetchNextQuestion();\n                      return 0;\n                    }\n                    return c - 1;\n                  });\n                }, 1000);\n              }}\n              disabled={loadingNext}\n              style={{ marginTop: '0.5rem' }}\n            >\n              {loadingNext ? 'Loading Next…' : 'Next Question'}\n            </button>\n          )}\n\n          {intermission && <p>Next question in {countdown}s…</p>}\n        </div>\n\n        {finishError && <div style={{ color: 'red', marginBottom: '1rem' }}><strong>Error:</strong> {finishError}</div>}\n\n        <button\n          onClick={handleFinish}\n          disabled={finishing || waitingForScore}\n        >\n          {finishing ? 'Finishing…' : 'Finish Interview Now'}\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}